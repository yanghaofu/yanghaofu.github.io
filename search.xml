<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>论文阅读</category>
      </categories>
      <tags>
        <tag>第一篇</tag>
      </tags>
  </entry>
  <entry>
    <title>LinUCB</title>
    <url>/2024/02/21/LinUCB/</url>
    <content><![CDATA[<h1 id="1-背景与意义"><a href="#1-背景与意义" class="headerlink" title="1. 背景与意义"></a>1. 背景与意义</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我的大作业是对体育新闻进行检索并实现了个性化推荐。在实现个性化推荐的时候，主要遇到两个问题：</p>
<ul>
<li>用户刚刚注册完，缺少和新闻的交互，推荐的时候会遇到冷启动问题。</li>
<li>我的推荐系统只基于用户之前的点击，没有对用户没点击过的新闻进行探索。</li>
</ul>
<p>这次作业，我想针对第二个问题进行探究和尝试解决。我想尝试利用上下文感知的方法来得到探索-利用的最佳策略。</p>
<p>随着互联网技术的发展，个性化推荐系统在提高用户体验、增强信息过滤效率方面发挥着越来越重要的作用。上下文感知的推荐系统能够在用户与物品交互的过程中，考虑用户的偏好和物品的特征，实时调整推荐策略。</p>
<p>在查阅的过程中，我发现了一种算法：LinUCB。LinUCB是一种结合了上下文信息的多臂老虎机算法。在推荐系统中，它通过考虑用户和物品的特征来优化文章的选择。算法的关键在于平衡对用户偏好已知的物品（利用）和探索新的或不太确定的物品（探索）之间的权衡。</p>
<p>这种类型的算法适用于个性化推荐，如新闻推荐、在线广告等，其中推荐的内容需要根据用户的上下文或历史行为动态调整。所以我想对这种推荐方式进行学习和尝试。</p>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>这种基于上下文的个性化推荐系统对于信息检索系统有重大意义。</p>
<h3 id="提高用户满意度"><a href="#提高用户满意度" class="headerlink" title="提高用户满意度"></a>提高用户满意度</h3><p>个性化推荐系统通过提供与用户兴趣和偏好相匹配的内容，大幅提高了用户的满意度。用户不再需要在海量信息中进行耗时的搜索，而是能够快速得到他们感兴趣的新闻或商品。</p>
<h3 id="解决信息过载问题"><a href="#解决信息过载问题" class="headerlink" title="解决信息过载问题"></a>解决信息过载问题</h3><p>随着信息量的爆炸式增长，用户面临着严重的信息过载问题。个性化推荐系统通过智能筛选和排序，帮助用户更高效地获取信息，显著减轻了信息过载的负担。</p>
<h3 id="探索-利用平衡"><a href="#探索-利用平衡" class="headerlink" title="探索-利用平衡"></a>探索-利用平衡</h3><p>在个性化推荐中，探索-利用问题是一个核心问题。如果系统过于依赖用户历史行为，可能会陷入过度利用的局面，从而错过新兴趋势或用户兴趣的变化。LinUCB 算法通过动态调整探索和利用的比例，有效地解决了这个问题。</p>
<h3 id="提高商业价值"><a href="#提高商业价值" class="headerlink" title="提高商业价值"></a>提高商业价值</h3><p>对于新闻网站、在线购物平台等，个性化推荐不仅可以提升用户体验，还可以直接转化为商业价值。用户越满意，平台的用户停留时间越长，点击率和转化率也越高。</p>
<h3 id="支持冷启动策略"><a href="#支持冷启动策略" class="headerlink" title="支持冷启动策略"></a>支持冷启动策略</h3><p>解决新用户冷启动问题是个性化推荐领域的一大挑战。通过实时考虑上下文信息和探索未知领域，上下文感知推荐系统如 LinUCB 可以更好地处理新用户或新物品的推荐，为系统的快速迭代和用户群的增长提供了支持。</p>
<h1 id="2-现状分析"><a href="#2-现状分析" class="headerlink" title="2. 现状分析"></a>2. 现状分析</h1><p>用户在互联网上的行为具有高度的多样性和不可预测性。他们的兴趣可能会随时间、情境和心情的变化而变化，这为推荐系统的准确性和及时性提出了挑战。</p>
<p>当前的推荐系统大多依赖于用户历史数据和明确的偏好反馈。然而，这些系统往往忽视了用户偏好的动态变化和实时上下文因素。在推荐系统中，如何平衡对已知内容的利用和对未知内容的探索，是一个长期存在的问题。过度利用可能导致内容的单调和用户兴趣的忽视，而过度探索则可能降低用户体验和满意度。</p>
<p>LinUCB 算法通过结合探索（exploration）和利用（exploitation）策略，可以更好地适应用户行为的变化，提供更加个性化的推荐。</p>
<h1 id="3-方案设计"><a href="#3-方案设计" class="headerlink" title="3. 方案设计"></a>3. 方案设计</h1><p>本项目的核心是实现一个基于 LinUCB 算法的推荐系统。LinUCB 算法通过在线学习用户的行为和反馈来更新推荐策略，能够在保证探索新内容的同时，利用已有知识作出准确的推荐。本次实验我将实现以下功能。</p>
<h2 id="上下文感知推荐"><a href="#上下文感知推荐" class="headerlink" title="上下文感知推荐"></a>上下文感知推荐</h2><p>采用上下文感知推荐算法——LinUCB，可以有效利用用户和物品的特征信息来做出推荐决策。这类算法通过实时分析用户的行为和物品的特性，动态调整推荐策略，从而提供更加个性化和精准的推荐。</p>
<h2 id="探索-利用策略的优化"><a href="#探索-利用策略的优化" class="headerlink" title="探索-利用策略的优化"></a>探索-利用策略的优化</h2><p>在算法设计中引入合适的探索-利用策略，如通过调整 LinUCB 算法中的 <code>alpha</code> 参数，可以帮助系统在稳定性和灵活性之间找到一个平衡点。合理的探索策略可以帮助系统更快地学习用户的真实偏好，同时避免过度打扰用户。</p>
<h2 id="多臂老虎机算法的应用"><a href="#多臂老虎机算法的应用" class="headerlink" title="多臂老虎机算法的应用"></a>多臂老虎机算法的应用</h2><p>多臂老虎机算法是处理探索与利用权衡的一种有效方法，LinUCB 算法是其中的一种。这类算法不仅能处理个性化推荐的需求，还能有效应对动态变化的环境和实时更新的需求，特别是在新用户或新内容出现时。</p>
<h2 id="用户反馈的快速迭代"><a href="#用户反馈的快速迭代" class="headerlink" title="用户反馈的快速迭代"></a>用户反馈的快速迭代</h2><p>设计系统能够快速响应用户的反馈，通过实时更新推荐模型来改进推荐结果。每当用户与推荐内容进行交互（点击），系统可以学习这些反馈，不断优化用户的个人化模型。</p>
<h1 id="4-技术路线"><a href="#4-技术路线" class="headerlink" title="4. 技术路线"></a>4. 技术路线</h1><p>评价标准：</p>
<p><img src="/./../assets/image-20231227132647820-1703654810963-1.png" alt="image-20231227132647820" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><strong>点击次数</strong>是用户实际点击广告或推荐内容的总次数。</li>
<li><strong>展示次数</strong>是广告或推荐内容被展示给用户的总次数。</li>
</ul>
<p>CTR的值反映了用户对特定内容或广告点击的概率。一个高的CTR意味着用户在看到内容后更可能进行点击，这通常被认为是广告或推荐系统有效性的标志。在推荐系统和在线广告中，优化CTR是至关重要的，因为它直接关系到用户参与度和潜在的收入。</p>
<p>我的代码有以下三个步骤：</p>
<ol>
<li><strong>数据预处理</strong>：从数据文件中加载并处理数据，提取特征和用户反馈。</li>
<li>算法实现:<ul>
<li>实现基础的 LinUCB 算法，包括评分计算和实时更新。</li>
<li>实现不同策略下的 alpha 值选择，包括基于时间的动态 alpha、网格搜索和理论公式计算。</li>
</ul>
</li>
<li>性能评估：<ul>
<li>使用累积点击率（CTR）和总奖励作为评估指标。</li>
<li>进行多次实验以获取平均性能指标。</li>
<li>绘制时间序列图以展示算法性能随时间的变化。</li>
</ul>
</li>
</ol>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><ul>
<li><strong>数据文件</strong>: <code>DATA_FILE_1</code> 和 <code>DATA_FILE_2</code> 表示两个数据集的文件名。</li>
<li><strong>数据格式</strong>: 每行包含一个选择的文章编号、获得的奖励和100个特征。</li>
</ul>
<h2 id="功能函数"><a href="#功能函数" class="headerlink" title="功能函数"></a>功能函数</h2><ol>
<li><strong><code>plot_cumulative_take_rate</code></strong>: 画出累积点击率随时间变化的图。它首先收集所有时间点的累积点击率数据，然后使用 matplotlib 绘制曲线，并标记出累积点击率的最大值点。</li>
<li><strong><code>find_optimal_alpha_1</code></strong>: 根据时间返回最优的 alpha 值。在这个实现中，alpha 是 1&#x2F;sqrt(time)，意味着随着时间的增长，置信水平逐渐降低。</li>
</ol>
<h2 id="LinUCB-算法"><a href="#LinUCB-算法" class="headerlink" title="LinUCB 算法"></a>LinUCB 算法</h2><p><strong><code>LinUCB_modified</code></strong>:</p>
<ul>
<li><strong>参数</strong>:<ul>
<li><code>data_file</code>: 数据文件路径。</li>
<li><code>alpha</code>: 控制探索的程度。较高的 alpha 值会使算法更多地探索。</li>
<li><code>plot_or_not</code>: 是否绘制累积点击率曲线图。</li>
</ul>
</li>
<li><strong>实现细节</strong>:<ul>
<li>初始设置10篇文章、10个时间点和100个特征。</li>
<li>读取数据文件，并对每个时间点进行处理。</li>
<li>对每篇文章计算评分（使用 theta 和 alpha 计算），选择评分最高的文章作为推荐。</li>
<li>更新对应文章的 A 矩阵和 b 向量。</li>
<li>计算并更新累积点击率（CTR）。</li>
<li>最终返回所有时间点的累积点击率和总收益。</li>
</ul>
</li>
</ul>
<h2 id="模拟实验与结果展示"><a href="#模拟实验与结果展示" class="headerlink" title="模拟实验与结果展示"></a>模拟实验与结果展示</h2><p><strong><code>call_LinUCB</code></strong>:</p>
<ul>
<li>调用 <code>LinUCB_modified</code> 函数多次，并计算平均累积点击率和平均总收益。</li>
<li>用于评估算法在多次运行中的平均表现。</li>
</ul>
<p><strong>运行实验</strong>:</p>
<ul>
<li>最后，代码通过调用 <code>call_LinUCB</code> 函数三次来计算平均累积点击率和总收益，并打印出结果。</li>
</ul>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>本项目通过实现一个基于 LinUCB 算法的推荐系统，展示了上下文感知推荐的潜力。项目成功地探索了如何在探索新内容与利用已知知识之间找到平衡。最终，本系统能够根据实时上下文数据做出更准确、更个性化的推荐，从而提高用户满意度和系统的整体性能。</p>
<h1 id="6-不足与改进"><a href="#6-不足与改进" class="headerlink" title="6. 不足与改进"></a>6. 不足与改进</h1><p>首先是我还没有将数据集转化成我在大作业中收集到的数据，一个原因是我没有足够的数据，其次是我还无法归纳出足够的特征。这一点是我后面探索的主要方向。</p>
<p>还有一点改进方向是，在LinUCB中，alpha的值是至关重要的，我没有对它的取值方式做更多探索，这一点在后续的算法优化中可以尝试一下。</p>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
  </entry>
  <entry>
    <title>深度学习笔记</title>
    <url>/2024/02/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="标量与张量"><a href="#标量与张量" class="headerlink" title="标量与张量"></a>标量与张量</h3><ol>
<li><strong>标量（Scalar）</strong>：<ul>
<li>标量是一个单独的数值，它没有方向，只有大小。</li>
<li>在数学和物理学中，常见的标量包括实数、整数、小数等。例如，温度、体积、密度等都可以表示为标量。</li>
<li>在深度学习中，标量通常表示为一个单独的数，如神经网络的损失值或者准确率等评估指标。</li>
</ul>
</li>
<li><strong>张量（Tensor）</strong>：<ul>
<li>张量是一个多维数组，可以是零维、一维、二维，甚至更高维度的数组。</li>
<li>在数学和物理学中，张量是向量的推广，向量是一维的张量，矩阵是二维的张量。</li>
<li>在深度学习中，张量是最基本的数据表示形式，用于表示神经网络的输入、输出、参数和中间计算结果等。例如，一张彩色图片可以表示为一个三维张量，其中的维度分别是宽度、高度和颜色通道；一组图片组成的数据集可以表示为一个四维张量，其中的维度分别是样本数量、宽度、高度和颜色通道。</li>
</ul>
</li>
</ol>
<h3 id="自动求梯度"><a href="#自动求梯度" class="headerlink" title="自动求梯度"></a>自动求梯度</h3><ol>
<li><p><code>out.backward()</code>计算了 <code>out</code> 对所有叶子节点（即需要求导的变量）的梯度。</p>
</li>
<li><p>在调用了 <code>out.backward()</code> 之后，<code>x</code> 对应的梯度信息会存储在 <code>x.grad</code> 中，我们可以通过打印 <code>x.grad</code> 来查看 <code>x</code> 的梯度值。</p>
</li>
<li><p>叶子节点：像x这种直接创建的称为叶子节点，叶子节点对应的<code>grad_fn</code>是<code>None</code></p>
</li>
<li><p>如果<code>y</code>是张量，则需要为<code>backward()</code>传入一个与<code>y</code>同形的<code>Tensor</code>：</p>
<ul>
<li>假设<code>y</code>由自变量<code>x</code>计算而来，<code>w</code>是和<code>y</code>同形的张量，则<code>y.backward(w)</code>的含义是：先计算<code>l = torch.sum(y * w)</code>，则<code>l</code>是个标量，然后求<code>l</code>对自变量<code>x</code>的导数。</li>
</ul>
</li>
</ol>
<h1 id="深度学习基础"><a href="#深度学习基础" class="headerlink" title="深度学习基础"></a>深度学习基础</h1><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>1.线性回归：输出一个连续值，适用于回归问题。</p>
<p>2.回归问题：预测房屋价格、气温、销售额等连续值的问题</p>
<h3 id="2-模型定义"><a href="#2-模型定义" class="headerlink" title="2.模型定义"></a>2.模型定义</h3><p>设房屋的面积为 $x_1$ ，房龄为 $x_2$ ，售出价格为 $y$ 。我们需要建立基于输入 $x_1$ 和 $x_2$ 来计算输出 $y$ 的表达式，也就是模型 (model) 。顾名思义，线性回归假设输出与各个输入之间是线性关系:<br>$$ \hat{y}&#x3D;x_1 w_1+x_2 w_2+b $$</p>
<p>其中 $w_1$ 和 $w_2$ 是权重 (weight)， $b$ 是偏差 (bias)，且均为标量。它们是线性回归模型的参数 (parameter)。模型输出 $\hat{y}$ 是线性回归对真实价格 $y$ 的预测或估计。我们通常允许它们之间有一定误差。</p>
<h3 id="3-模型训练"><a href="#3-模型训练" class="headerlink" title="3.模型训练"></a>3.模型训练</h3><p>主要有三要素:</p>
<h4 id="1-训练数据"><a href="#1-训练数据" class="headerlink" title="1.训练数据"></a>1.训练数据</h4><p>一栋房屋被称为一个样本（sample），其真实售出价格叫作标签（label），用来预测标签的两个因素叫作特征（feature）。</p>
<p>假设我们采集的样本数为 $n$ ，索引为 $i$ 的样本的特征为 $x_1^{(i)}$ 和 $x_2^{(i)}$ ，标签为 $y^{(i)}$ 。对于索引为 $i$ 的房屋，线性回归模型的房屋价格预测表达式为<br>$$ \hat{y}^{(i)}&#x3D;x_1^{(i)} w_1+x_2^{(i)} w_2+b $$</p>
<h4 id="2-损失函数"><a href="#2-损失函数" class="headerlink" title="2.损失函数"></a>2.损失函数</h4><p>在模型训练中，我们需要衡量价格预测值与真实值之间的误差。通常我们会选取一个非负数作为误差，且数值越小表示误差越小。一个常用的选择是平方函数。它在评估索引为 $i$ 的样本误差的表达式为</p>
<p>$$ \ell^{(i)}(w_1, w_2, b) &#x3D; \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2 $$<br>这里使用的平方误差函数也称为平方损失。通常，我们用训练数据集中所有样本误差的平均来衡量模型预测的质量。</p>
<p>在训练中，我们希望找出一组模型参数，使得训练样本评价损失最小：<br>$$ w_1^*, w_2^*, b^* &#x3D; \underset{w_1, w_2, b}{\arg\min} \ell(w_1, w_2, b) $$</p>
<h4 id="3-优化算法"><a href="#3-优化算法" class="headerlink" title="3.优化算法"></a>3.优化算法</h4><p>较复杂的深度学习模型没有解析解，只能通过优化算法有限次迭代模型参数来降低损失函数的值。这类解叫作数值解。</p>
<p>求数值解，主要利用‘小批量随机梯度下降’，算法思路：</p>
<ul>
<li>选取一组模型参数的初始值</li>
<li>对参数进行多次迭代，使每次迭代都可能降低损失函数的值。每次迭代中，先随机均匀采样一个由固定数目训练数据样本所组成的小批量$β$</li>
<li>然后求小批量中数据的平均损失有关参数的梯度</li>
<li>最后用此结果与预先设定的一个正数的乘积作为模型参数在本次迭代的减小量。</li>
</ul>
<p>本模型的参数迭代：<br>$$ \begin{aligned}w_1 &amp;\leftarrow w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_1} &#x3D; w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\w_2 &amp;\leftarrow w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_2} &#x3D; w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\b &amp;\leftarrow b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial b} &#x3D; b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right).\end{aligned} $$</p>
<p>这里的批量大小和学习率的值是人为设定的，并不是通过模型训练学出的，因此叫作超参数（hyperparameter）。我们通常所说的“调参”指的正是调节超参数，例如通过反复试错来找到超参数合适的值。</p>
<h2 id="线性回归表示方法"><a href="#线性回归表示方法" class="headerlink" title="线性回归表示方法"></a>线性回归表示方法</h2>]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
</search>
